#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define ZMK_POINTING_DEFAULT_SCRL_VAL 80

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

&trackball {
    automouse-layer = <3>;
    scroll-layers = <4>;

    // arrows {
    //     layers = <3>;
    //     bindings =
    //         <&kp RIGHT_ARROW>,
    //         <&kp LEFT_ARROW>,
    //         <&kp UP_ARROW>,
    //         <&kp DOWN_ARROW>;
    //     tick = <10>;
    //     wait-ms = <5>;
    //     tap-ms = <5>;
    // };
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <12 13>;
        };

        muhennkann {
            bindings = <&to_layer_0 INT_MUHENKAN>;
            key-positions = <11 10>;
        };

        double_quotation {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <20 21>;
        };

        eq {
            bindings = <&kp EQUAL>;
            key-positions = <24 25>;
        };

        minus {
            bindings = <&kp MINUS>;
            key-positions = <18 18 19>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };

        maximize_window: maximize_window {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(SPACE) &kp X>;
            label = "MAXIMIZE_WINDOW";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        encoder_msc_down_up: encoder_msc_down_up {
            compatible = "zmk,behavior-sensor-rotate";
            label = "ENCODER_MSC_DOWN_UP";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

            tap-ms = <20>;
        };

        // --- Copy ---
        // Mac: ダブルタップで Command + C

        copy_mac: copy_mac {
            compatible = "zmk,behavior-tap-dance";
            label = "COPY_MAC";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp C>, <&kp LG(C)>;
        };

        // Win: ダブルタップで Control + C

        copy_win: copy_win {
            compatible = "zmk,behavior-tap-dance";
            label = "COPY_WIN";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp C>, <&kp LC(C)>;
        };

        // --- Paste ---
        // Mac: ダブルタップで Command + V

        paste_mac: paste_mac {
            compatible = "zmk,behavior-tap-dance";
            label = "PASTE_MAC";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp V>, <&kp LG(V)>;
        };

        // Win: ダブルタップで Control + V

        paste_win: paste_win {
            compatible = "zmk,behavior-tap-dance";
            label = "PASTE_WIN";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp V>, <&kp LC(V)>;
        };

        // --- Undo ---
        // Mac: ダブルタップで Command + Z

        undo_mac: undo_mac {
            compatible = "zmk,behavior-tap-dance";
            label = "UNDO_MAC";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mt LEFT_SHIFT Z>, <&kp LG(Z)>;
        };

        // Win: ダブルタップで Control + Z

        undo_win: undo_win {
            compatible = "zmk,behavior-tap-dance";
            label = "UNDO_WIN";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mt LEFT_SHIFT Z>, <&kp LC(Z)>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer_mac {
            bindings = <
&kp Q               &kp W           &kp E         &kp R                          &kp T                                                                   &kp Y            &kp U  &lt 4 I    &kp O    &kp P
&mt LEFT_CONTROL A  &kp S           &kp D         &kp F                          &kp G                    &kp LS(LG(LC(NUMBER_4)))      &kp MINUS        &kp H            &kp J  &kp K      &kp L    &lt 3 SEMICOLON
&mt LSHIFT Z        &kp X           &kp C         &kp V                          &kp B                    &kp BACKSPACE                 &kp RETURN       &kp N            &kp M  &kp COMMA  &kp DOT  &kp SLASH
&kp LEFT_WIN        &kp LEFT_SHIFT  &kp LEFT_ALT  &mt LEFT_COMMAND LC(UP_ARROW)  &lt 5 LC(LS(SEMICOLON))  &lt 6 SPACE                   &lt 2 LG(SPACE)  &lt 1 LC(LS(J))                             &kp SINGLE_QUOTE
            >;

            sensor-bindings = <&encoder_msc_down_up>;
        };

        arrow_mac {
            bindings = <
&kp ESCAPE      &trans          &kp UP_ARROW    &trans           &trans                       &trans     &kp LG(LEFT_BRACKET)  &kp LG(R)           &kp LG(RIGHT_BRACKET)  &trans
&kp HOME        &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp END  &trans      &trans  &trans     &kp LA(LC(LEFT))      &kp LA(LC(RETURN))  &kp LC(LA(RIGHT))      &trans
&kp LEFT_SHIFT  &trans          &trans          &trans           &trans   &trans      &trans  &kp LG(W)  &kp LC(LS(TAB))       &kp LG(L)           &kp LC(TAB)            &kp LG(T)
&trans          &trans          &trans          &trans           &trans   &trans      &trans  &trans                                                                      &trans
            >;

            sensor-bindings = <&inc_dec_kp LC(RIGHT) LC(LEFT)>;
        };

        setting_com {
            bindings = <
&trans  &trans        &trans        &trans        &trans                           &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &to 0         &to 7         &trans        &trans        &trans
&trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans  &trans      &bootloader  &trans        &trans        &trans        &trans        &bt BT_CLR
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans                                                  &bt BT_CLR_ALL
            >;
        };

        mouse_com {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &mkp MB1  &mkp MB3  &mkp MB2  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                                &trans
            >;
        };

        scroll_com {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };

        NUM_COM {
            bindings = <
&kp MINUS                   &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp PLUS                                                     &kp CARET         &kp AMPERSAND      &kp TILDE       &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS
&kp SLASH                   &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp ASTERISK  &kp LC(LA(KP_NUMBER_0))      &kp UNDERSCORE    &kp EXCLAMATION   &kp AT_SIGN        &kp HASH        &kp DOLLAR            &kp PERCENT
&mt LEFT_SHIFT KP_NUMBER_0  &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp PERIOD    &kp EQUAL                    &kp SINGLE_QUOTE  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp LEFT_BRACE  &kp RIGHT_BRACE       &kp BACKSLASH
&trans                      &trans           &trans           &trans           &trans        &trans                       &trans            &trans                                                                     &kp PIPE
            >;
        };

        FUNCTION_COM {
            bindings = <
&trans  &trans  &trans  &trans  &trans                       &kp F1  &kp F2  &kp F3  &kp F4  &kp F5
&trans  &trans  &trans  &trans  &trans  &trans      &kp F13  &kp F6  &kp F7  &kp F8  &kp F9  &kp F10
&trans  &trans  &trans  &trans  &trans  &trans      &trans   &trans  &trans  &trans  &trans  &kp F11
&trans  &trans  &trans  &trans  &trans  &trans      &trans   &trans                          &kp F12
            >;
        };

        default_layer_win {
            bindings = <
&kp Q               &kp W           &kp E         &kp R                     &kp T                                               &kp Y             &kp U  &lt 4 I    &kp O    &kp P
&mt LEFT_CONTROL A  &kp S           &kp D         &kp F                     &kp G               &kp LS(LG(S))      &kp MINUS    &kp H             &kp J  &kp K      &kp L    &lt 3 SEMICOLON
&mt LSHIFT Z        &kp X           &kp C         &kp V                     &kp B               &kp BACKSPACE      &kp RETURN   &kp N             &kp M  &kp COMMA  &kp DOT  &kp SLASH
&kp LCTRL           &kp LEFT_SHIFT  &kp LEFT_ALT  &mt LEFT_CONTROL LG(TAB)  &lt 5 INT_MUHENKAN  &lt 6 SPACE        &lt 2 LG(S)  &lt 1 INT_HENKAN                             &kp SINGLE_QUOTE
            >;

            sensor-bindings = <&encoder_msc_down_up>;
        };

        arrow_win {
            bindings = <
&kp ESCAPE      &trans          &kp UP_ARROW    &trans           &trans                       &trans     &kp LA(LEFT)     &kp LC(R)         &kp LA(RIGHT)  &trans
&kp HOME        &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp END  &trans      &trans  &trans     &kp LG(LEFT)     &maximize_window  &kp LG(RIGHT)  &trans
&kp LEFT_SHIFT  &trans          &trans          &trans           &trans   &trans      &trans  &kp LC(W)  &kp LC(LS(TAB))  &kp LG(L)         &kp LC(TAB)    &kp LC(T)
&trans          &trans          &trans          &trans           &trans   &trans      &trans  &trans                                                       &trans
            >;

            sensor-bindings = <&inc_dec_kp LC(LG(RIGHT)) LC(LG(LEFT))>;
        };
    };
};
